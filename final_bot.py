
# VERSION 2.0_TEST ADD ADMIN - PANEL !!!

# VERSION 2.0 - WITH ADMIN PANEL AND CONTENT MANAGEMENT

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from flask import Flask
import os
import threading
import json
import time

# Flask –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–æ–≤—Å–∫–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_IDS = [837888138]  # –∞–π–¥–∏—à–Ω–∏–∫ –∞–¥–º–∏–Ω–∞ 

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is not set")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
CONTENT_FILE = 'content.json'
USERS_FILE = 'users.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
def load_content():
    try:
        with open(CONTENT_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        default_content = {
            "tech": {
                "title": "üìö –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞",
                "materials": [
                    "üîπ –¢–µ–º–∞ 1: –û—Å–Ω–æ–≤—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤",
                    "‚Ä¢ –õ–µ–∫—Ü–∏—è: —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç",
                    "‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç"
                ]
            },
            "geo": {
                "title": "üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", 
                "materials": [
                    "üîπ –¢–µ–º–∞ 1: –§–∏–∑–∏—á–µ—Å–∫–∞—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—è",
                    "‚Ä¢ –õ–µ–∫—Ü–∏—è: —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç",
                    "‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç"
                ]
            },
            "soc": {
                "title": "üë• –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
                "materials": [
                    "üîπ –¢–µ–º–∞ 1: –û—Å–Ω–æ–≤—ã –æ–±—â–µ—Å—Ç–≤–∞", 
                    "‚Ä¢ –õ–µ–∫—Ü–∏—è: —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç",
                    "‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç"
                ]
            },
            "cloud": {
                "title": "‚òÅÔ∏è –û–±–ª–∞–∫–æ –æ–±—â–µ—Å—Ç–≤–æ/–≥–µ–æ–≥—Ä–∞—Ñ–∏—è",
                "materials": [
                    "üìÅ Google Drive —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏:",
                    "https://drive.google.com/drive/folders/1wPT76zG8mo2zz_4ZIYpyS0FPZEioxkc3"
                ]
            },
            "contact": {
                "title": "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º",
                "materials": [
                    "üë®‚Äçüè´ –¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤ –¢–µ—Å—Ç–æ–≤–∏—á",
                    "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 000 000 00",
                    "üè¢ –ö–∞–±–∏–Ω–µ—Ç: (–∫–∞–±–∏–Ω–µ—Ç)",
                    "üí¨ Telegram: @tg_teacher"
                ]
            }
        }
        save_content(default_content)
        return default_content

def save_content(content):
    with open(CONTENT_FILE, 'w', encoding='utf-8') as f:
        json.dump(content, f, ensure_ascii=False, indent=2)

def load_users():
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return []

def save_user(user_id):
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users, f, ensure_ascii=False, indent=2)

def is_admin(user_id):
    return user_id in ADMIN_IDS

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
content = load_content()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    save_user(message.chat.id)
    
    markup = InlineKeyboardMarkup(row_width=1)
    btn1 = InlineKeyboardButton(content["tech"]["title"], callback_data='tech')
    btn2 = InlineKeyboardButton(content["geo"]["title"], callback_data='geo') 
    btn3 = InlineKeyboardButton(content["soc"]["title"], callback_data='soc')
    btn4 = InlineKeyboardButton(content["cloud"]["title"], callback_data='cloud')
    btn5 = InlineKeyboardButton(content["contact"]["title"], callback_data='contact')
    btn6 = InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about')
    
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if is_admin(message.from_user.id):
        markup.add(InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel'))
    
    bot.send_message(
        message.chat.id,
        """üéì –£—á–µ–±–Ω—ã–π –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω: (VERSION 2.0)

- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ üñ•Ô∏è
- –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ ‚öñÔ∏è  
- –ì–µ–æ–≥—Ä–∞—Ñ–∏—è üåç

‚ùó–ù–∏–∂–µ, —Å–ª–µ–¥—É—è –ø–æ –∫–Ω–æ–ø–∫–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.""",
        reply_markup=markup
    )

# –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", callback_data='admin_content'),
        InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_broadcast'),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats'),
        InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')
    )
    
    bot.send_message(
        message.chat.id,
        "‚öôÔ∏è *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    global content
    
    if call.data == 'back':
        show_main_menu(call)
        return
        
    elif call.data == 'admin_panel':
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return
            
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", callback_data='admin_content'),
            InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_broadcast'),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats'),
            InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')
        )
        
        bot.edit_message_text(
            "‚öôÔ∏è *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
        return
        
    elif call.data == 'admin_content':
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return
            
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("üìö –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data='edit_tech'),
            InlineKeyboardButton("üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—è", callback_data='edit_geo'),
            InlineKeyboardButton("üë• –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", callback_data='edit_soc'),
            InlineKeyboardButton("‚òÅÔ∏è –û–±–ª–∞–∫–æ", callback_data='edit_cloud'),
            InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='edit_contact'),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_panel')
        )
        
        bot.edit_message_text(
            "üìù *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
        return
        
    elif call.data.startswith('edit_'):
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return
            
        section = call.data.replace('edit_', '')
        bot.answer_callback_query(call.id, f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞: {section}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        bot.register_next_step_handler(call.message, process_content_edit, section)
        
        current_content = "\n".join(content[section]["materials"])
        bot.send_message(
            call.message.chat.id,
            f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞: {content[section]['title']}*\n\n"
            f"–¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{current_content}\n\n"
            f"üìù *–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–∞:*\n"
            f"(–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
            parse_mode='Markdown'
        )
        return
        
    elif call.data == 'admin_broadcast':
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return
            
        bot.answer_callback_query(call.id, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
        bot.register_next_step_handler(call.message, process_broadcast)
        
        bot.send_message(
            call.message.chat.id,
            "üì¢ *–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è*\n\n"
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            parse_mode='Markdown'
        )
        return
        
    elif call.data == 'admin_stats':
        if not is_admin(call.from_user.id):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
            return
            
        users = load_users()
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_panel'))
        
        bot.edit_message_text(
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{len(users)}*\n"
            f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {time.strftime('%H:%M:%S')}",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode='Markdown'
        )
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    elif call.data in content:
        text = f"{content[call.data]['title']} - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n" + "\n".join(content[call.data]["materials"])
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'))
        
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        
    elif call.data == 'about':
        text = """
‚ÑπÔ∏è –û –±–æ—Ç–µ (VERSION 2.0):

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≤ –∏–∑—É—á–µ–Ω–∏–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω:
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
‚Ä¢ –ì–µ–æ–≥—Ä–∞—Ñ–∏—è  
‚Ä¢ –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ

üìö –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ª–µ–∫—Ü–∏—è–º –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º
‚Ä¢ –ö–æ–Ω—Å–ø–µ–∫—Ç—ã –∑–∞–Ω—è—Ç–∏–π  
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –æ–±–ª–∞–∫–æ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏

üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ.
"""
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'))
        
        bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

def process_content_edit(message, section):
    global content
    if not is_admin(message.from_user.id):
        return
        
    new_materials = message.text.split('\n')
    content[section]["materials"] = new_materials
    save_content(content)
    
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel'))
    
    bot.send_message(
        message.chat.id,
        f"‚úÖ *–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!*\n\n"
        f"–†–∞–∑–¥–µ–ª: {content[section]['title']}\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
        reply_markup=markup,
        parse_mode='Markdown'
    )

def process_broadcast(message):
    if not is_admin(message.from_user.id):
        return
        
    broadcast_text = message.text
    users = load_users()
    
    progress_msg = bot.send_message(
        message.chat.id,
        f"üì§ *–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...*\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
        parse_mode='Markdown'
    )
    
    success = 0
    errors = 0
    
    for user_id in users:
        try:
            bot.send_message(user_id, f"üì¢ *–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n\n{broadcast_text}", parse_mode='Markdown')
            success += 1
        except:
            errors += 1
    
    bot.edit_message_text(
        f"‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
        f"üì® –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {errors}",
        message.chat.id,
        progress_msg.message_id,
        parse_mode='Markdown'
    )

def show_main_menu(call):
    markup = InlineKeyboardMarkup(row_width=1)
    btn1 = InlineKeyboardButton(content["tech"]["title"], callback_data='tech')
    btn2 = InlineKeyboardButton(content["geo"]["title"], callback_data='geo') 
    btn3 = InlineKeyboardButton(content["soc"]["title"], callback_data='soc')
    btn4 = InlineKeyboardButton(content["cloud"]["title"], callback_data='cloud')
    btn5 = InlineKeyboardButton(content["contact"]["title"], callback_data='contact')
    btn6 = InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about')
    
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)
    
    if is_admin(call.from_user.id):
        markup.add(InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel'))
    
    bot.edit_message_text(
        "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—á–µ–±–Ω—ã–π –±–æ—Ç!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! (VERSION 2.0)")
    print("üì± –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Telegram –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –≤–∞—à–µ–º—É –±–æ—Ç—É")
    print("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: /admin")
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)